# Multi-Goal SIP Planner - Cursor Context

## Project Overview

A modular web application for planning multiple financial goals using Systematic Investment Plans (SIPs). Built with vanilla JavaScript following SOLID principles for maintainability and testability.

## Architecture Philosophy

This codebase strictly follows SOLID principles with clear separation of concerns:

- **No monolithic files**: Each module has a single, well-defined responsibility
- **Dependency injection**: Dependencies are injected rather than created internally
- **Pure functions**: Business logic avoids side effects where possible
- **Modular design**: Changes to one module don't require changes to others

## Module Structure

### Core Modules

#### `js/goal.js` - Data Layer
**What it does**: Manages goal data and CRUD operations
**What it doesn't do**: No UI logic, no calculations, no formatting
**Key class**: `GoalManager`
**Goal Properties**: name, currentPrice, inflationRate, years, expectedReturn, stepUpRate
**When to modify**: Adding new goal properties or data operations

#### `js/calculator.js` - Business Logic
**What it does**: All financial calculations and business rules including inflation and step-up SIP
**What it doesn't do**: No DOM manipulation, no data storage, no formatting
**Key class**: `SIPCalculator`
**Key Methods**: 
- `calculateInflationAdjustedAmount()` - Adjusts current price for future inflation
- `calculateMonthlySIP()` - Calculates required monthly investment (supports step-up)
- `calculateStepUpSIP()` - Calculates initial SIP for annual increment plans (binary search)
- `calculateStepUpFutureValue()` - Calculates FV for step-up SIP
- `calculateTotalInvestment()` - Calculates total invested (supports step-up)
- `calculateSummary()` - Aggregates all goal calculations
**When to modify**: Adding new calculation methods or financial formulas
**Important**: All methods are pure functions - no side effects

#### `js/formatter.js` - Presentation Utilities
**What it does**: Formats data for display (currency, percentages, dates)
**What it doesn't do**: No calculations, no UI rendering, no data manipulation
**Key class**: `Formatter`
**When to modify**: Adding new display formats or localization

#### `js/storage.js` - Persistence Layer
**What it does**: Handles localStorage operations for data persistence
**What it doesn't do**: No business logic, no data transformation, no UI operations
**Key class**: `StorageService`
**Storage Keys**: `multigoal-sip-goals` (goals), `multigoal-sip-theme` (theme preference)
**When to modify**: Changing storage mechanism or adding storage utilities

#### `js/exporter.js` - Data Export
**What it does**: Exports goals to CSV and JSON formats with file download
**Key class**: `Exporter`
**When to modify**: Adding new export formats or customizing export data

#### `js/importer.js` - Data Import
**What it does**: Imports and validates goals from CSV and JSON files
**Key class**: `Importer`
**When to modify**: Adding new import formats or validation rules

#### `js/templates.js` - Goal Templates
**What it does**: Provides pre-configured goal templates
**Key class**: `TemplateManager`
**Built-in Templates**: 8 common financial goals
**When to modify**: Adding new templates or template properties

#### `js/theme.js` - Theme Management
**What it does**: Manages dark/light theme switching with persistence
**Key class**: `ThemeManager`
**When to modify**: Adding theme variants or changing theme behavior

#### `js/charts.js` - Visualization
**What it does**: Creates and manages Chart.js investment growth charts
**Key class**: `ChartManager`
**Dependencies**: Chart.js 4.4.0 (CDN)
**When to modify**: Adding new chart types or visualization features

#### `js/ui.js` - View Layer
**What it does**: DOM manipulation and rendering
**What it doesn't do**: No business logic, no data storage
**Key class**: `UIRenderer`
**Dependencies**: Receives `SIPCalculator` and `Formatter` via constructor
**When to modify**: Changing UI layout or adding new display elements

#### `js/app.js` - Application Controller
**What it does**: Orchestrates all modules, handles all user events, manages complete application lifecycle
**What it doesn't do**: Minimal business logic - delegates to specialized modules
**Key class**: `MultiGoalSIPApp`
**Lifecycle**: Creates dependencies → Initializes theme → Loads stored data → Sets up all event handlers → Renders UI and charts
**Event Handlers**: Form submission, goal removal, clear all, export, import, templates, theme toggle
**When to modify**: Adding new event handlers or changing application flow

## Development Guidelines

### Adding New Features

#### New Calculation Feature
1. Add method to `SIPCalculator` in `calculator.js`
2. If UI changes needed, update `UIRenderer` in `ui.js`
3. If new data needed, update `GoalManager` in `goal.js`
4. Write tests in `tests/unit/calculator.test.js`

#### New Display Format
1. Add method to `Formatter` in `formatter.js`
2. Use new formatter in `UIRenderer` in `ui.js`
3. Write tests in `tests/unit/formatter.test.js`

#### New Goal Property
1. Update `GoalManager.addGoal()` signature in `goal.js`
2. Update form in `index.html`
3. Update `UIRenderer.getFormValues()` and `UIRenderer.createGoalCard()` in `ui.js`
4. Update `app.js` to pass new property when calling `addGoal()`
5. Update export/import modules to handle new property
6. Write tests for the new property

### Code Standards

#### ES6 Modules
- Always use `import`/`export` syntax
- Each class should be exported
- Import only what you need

#### Class Structure
```javascript
/**
 * Class description
 */
export class ClassName {
    /**
     * Constructor description
     * @param {Type} paramName - Parameter description
     */
    constructor(paramName) {
        this.property = paramName;
    }

    /**
     * Method description
     * @param {Type} paramName - Parameter description
     * @returns {Type} Return value description
     */
    methodName(paramName) {
        // Implementation
    }
}
```

#### JSDoc Comments
- Every class must have a JSDoc comment
- Every public method must have a JSDoc comment
- Include `@param` for all parameters
- Include `@returns` for return values
- Follow Google's Technical Writing Style Guide

#### Naming Conventions
- **Classes**: PascalCase (e.g., `GoalManager`, `SIPCalculator`)
- **Methods/Functions**: camelCase (e.g., `calculateMonthlySIP`, `addGoal`)
- **Variables**: camelCase (e.g., `totalSIP`, `goalManager`)
- **Constants**: UPPERCASE with underscores (e.g., `MAX_GOALS`)
- **Files**: kebab-case (e.g., `goal.js`, `calculator.js`)

### Dependency Injection Pattern

**Always inject dependencies** rather than creating them internally:

```javascript
// Good - Dependencies injected
export class UIRenderer {
    constructor(calculator, formatter) {
        this.calculator = calculator;
        this.formatter = formatter;
    }
}

// Bad - Dependencies created internally
export class UIRenderer {
    constructor() {
        this.calculator = new SIPCalculator(); // Tight coupling!
    }
}
```

### Pure Functions

Keep calculation logic pure (no side effects):

```javascript
// Good - Pure function
calculateMonthlySIP(targetAmount, years, annualRate) {
    const n = years * 12;
    const i = annualRate / 12 / 100;
    return targetAmount / (((Math.pow(1 + i, n) - 1) / i) * (1 + i));
}

// Bad - Side effects
calculateMonthlySIP(targetAmount, years, annualRate) {
    this.lastCalculation = targetAmount; // Side effect!
    document.getElementById('result').textContent = result; // DOM manipulation!
    return result;
}
```

## Financial Formulas Reference

### 1. Inflation Adjustment Formula
```
Future Value = Current Price × (1 + inflation_rate)^years
```

### 2. SIP Calculation Formula
```
Monthly SIP = FV / [((1 + i)^n - 1) / i) × (1 + i)]

Where:
- FV = Future Value (inflation-adjusted target amount)
- i = Monthly interest rate (annual rate / 12 / 100)
- n = Number of months (years × 12)
```

### 3. Step-up SIP Calculation
Uses binary search to find initial SIP that reaches target with annual increments.

## File Dependencies Graph

```
app.js (Main Orchestrator)
  ├── storage.js (StorageService)
  ├── theme.js (ThemeManager)
  │     └── storage.js (injected)
  ├── goal.js (GoalManager)
  │     └── storage.js (injected)
  ├── calculator.js (SIPCalculator)
  ├── formatter.js (Formatter)
  ├── exporter.js (Exporter)
  │     └── calculator.js (injected)
  ├── importer.js (Importer)
  ├── templates.js (TemplateManager)
  ├── charts.js (ChartManager)
  │     ├── calculator.js (injected)
  │     └── formatter.js (injected)
  └── ui.js (UIRenderer)
        ├── calculator.js (injected)
        └── formatter.js (injected)

index.html
  ├── styles.css
  ├── Chart.js (CDN - 4.4.0)
  ├── Tailwind CSS (CDN - 3.x)
  └── app.js (ES6 module)
```

## Extension Points

### Easy to Add
- New calculation methods (pure functions in `calculator.js`)
- New formatters (methods in `formatter.js`)
- New goal templates (add to `templates.js`)
- New export formats (extend `exporter.js`)
- New chart types (extend `charts.js`)
- New goal properties (update `goal.js`, `ui.js`, export/import modules)

### Moderate Effort
- Variable inflation rates (year-by-year rates in calculator)
- Multiple currencies (add to formatter and calculator)
- Goal milestones (extend goal.js and add UI)
- Cloud sync (replace/extend StorageService with API calls)
- PDF export (add new module using jsPDF or similar)

### Significant Refactor
- Backend integration (add API service layer)
- State management library (replace GoalManager)
- Framework migration (React/Vue/Angular)

## Testing Framework

### Overview
**280+ tests** with ~85% code coverage. Custom vanilla JavaScript framework (zero dependencies).

### Test Structure
```
tests/
├── test-runner.js        # Custom framework (440 lines)
├── test-suite.js         # Test orchestration
├── TESTING_GUIDE.md      # Complete docs (500+ lines)
├── unit/                 # 9 files, 255+ tests
└── functional/           # End-to-end tests (25+ tests)
```

### Running Tests
```bash
python3 -m http.server 8000
# Open: http://localhost:8000/tests/
```

### Key Testing Rules

**Test Organization:**
- Group tests with nested `describe()` blocks
- Use descriptive names: `'should calculate SIP correctly for 10 years'`
- One assertion per test when possible
- Keep tests independent

**Writing Tests:**
```javascript
export function runMyModuleTests(runner) {
    runner.describe('MyModule', () => {
        const beforeEach = () => { /* setup */ };
        
        runner.it('should do something', () => {
            beforeEach();
            assertEqual(actual, expected);
        });
    });
}
```

**Assertions (15+ available):**
- `assertEqual()`, `assertDeepEqual()`, `assertApproximately()`
- `assertTrue()`, `assertNull()`, `assertThrows()`
- `assertLength()`, `assertContains()`, `assertGreaterThan()`

**Mocking:**
```javascript
const mockFn = MockHelper.mockFunction();
const mockStorage = MockHelper.mockLocalStorage();
const spy = MockHelper.spy(originalFunction);
```

**What to Test:**
- ✅ All public methods, pure functions, edge cases
- ✅ Error handling, state changes, calculations
- ❌ External libraries, browser APIs, trivial getters

**When Making Changes:**
1. Write tests first (TDD recommended)
2. Run existing tests to ensure no regressions
3. Maintain coverage at current level or higher
4. Update tests only when behavior intentionally changes

**Debugging Tests:**
- View results in browser UI + console (F12)
- Use `assertApproximately()` for floats
- Use `assertDeepEqual()` for objects/arrays
- Reset mocks in `afterEach()` to avoid test pollution

### Module-Specific Testing Patterns

**Calculator:** Use `assertApproximately()` for floats, test edge cases (0 years, large amounts)
**Storage:** Mock localStorage, test error handling (quota, invalid JSON)
**Import/Export:** Test CSV parsing (quoted fields, whitespace), async operations
**Theme:** Mock matchMedia and localStorage, test system preference detection
**Charts:** Test data generation, handle missing Chart.js gracefully

**Full docs:** `tests/TESTING_GUIDE.md`

## Technology Stack

- **Vanilla JavaScript (ES6+)**: Modules, classes, async/await, arrow functions
- **ES6 Modules**: Native browser module system (import/export)
- **Tailwind CSS 3.x**: Utility-first CSS with dark mode (CDN)
- **Chart.js 4.4.0**: Interactive charts and visualizations (CDN)
- **Google Fonts**: Inter typeface
- **No build tools**: Zero npm packages, runs directly in browser

## Browser Requirements

- **ES6 module support**: Chrome 61+, Firefox 60+, Safari 11+, Edge 16+
- **LocalStorage API**: For goal and theme persistence
- **Intl.NumberFormat API**: For currency formatting
- **Canvas API**: For Chart.js rendering
- **CSS Grid & Flexbox**: For responsive layout
- **CSS Custom Properties**: For theming

## Best Practices Checklist

When making changes, ensure:
- [ ] Single Responsibility: Each module does one thing
- [ ] Open/Closed: Extend, don't modify existing code
- [ ] Dependency Injection: Inject dependencies in constructors
- [ ] JSDoc comments for all public methods
- [ ] No business logic in UI layer
- [ ] No DOM manipulation in business logic
- [ ] Pure functions for calculations
- [ ] Meaningful variable and function names
- [ ] Write tests for new features
- [ ] All tests pass before committing
- [ ] Update README.md if adding new features

## Context for AI Assistants

When asked to modify this codebase:
1. Identify which module(s) need changes based on responsibility
2. Maintain SOLID principles - don't mix concerns
3. Use dependency injection pattern consistently
4. Keep calculations pure and testable
5. Add JSDoc comments for new code
6. Write tests for new functionality (see `tests/TESTING_GUIDE.md`)
7. Update README.md for significant changes
8. Follow existing patterns and naming conventions
